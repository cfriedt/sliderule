/*
 * Copyright (C) 2015 Christopher Friedt <chrisfriedt@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.sliderule.stats;

/**
 * <p><b>Normal Distribution</b></p>
 * 
 * <p>This class provides a time-efficient means for querying values and
 * inverse values from the
 * <a href="http://en.wikipedia.org/wiki/Cumulative_distribution_function">cumulative distribution function (CDF)</a>
 * of the standard
 * <a href="http://en.wikipedia.org/wiki/Normal_distribution">normal distribution</a> (with &mu; = 0 and &sigma; = 1.0). 
 * </p>
 * @author <a href="mailto:chrisfriedt@gmail.com">Christopher Friedt</a>
 * @see
 *   <ul>
 *     <li>Wikipedia: <a href="http://en.wikipedia.org/wiki/Normal_distribution">Normal Distribution</a></li>
 *     <li>DeGroot, Morris H., and Schervish, Mark J. Probability and Statistics, 3rd Ed. Toronto: Addison-Wesley, 2002. pp. 776-778. Print.</li>
 *   </ul> 
 */
final class Normal {
	private Normal() {}

	// produced via Matlab's normcdf function
	private static final double[] xp = { 0.500000, 0.503989, 0.507978, 0.511966, 0.515953, 0.519939, 0.523922, 0.527903, 0.531881, 0.535856, 0.539828, 0.543795, 0.547758, 0.551717, 0.555670, 0.559618, 0.563559, 0.567495, 0.571424, 0.575345, 0.579260, 0.583166, 0.587064, 0.590954, 0.594835, 0.598706, 0.602568, 0.606420, 0.610261, 0.614092, 0.617911, 0.621720, 0.625516, 0.629300, 0.633072, 0.636831, 0.640576, 0.644309, 0.648027, 0.651732, 0.655422, 0.659097, 0.662757, 0.666402, 0.670031, 0.673645, 0.677242, 0.680822, 0.684386, 0.687933, 0.691462, 0.694974, 0.698468, 0.701944, 0.705401, 0.708840, 0.712260, 0.715661, 0.719043, 0.722405, 0.725747, 0.729069, 0.732371, 0.735653, 0.738914, 0.742154, 0.745373, 0.748571, 0.751748, 0.754903, 0.758036, 0.761148, 0.764238, 0.767305, 0.770350, 0.773373, 0.776373, 0.779350, 0.782305, 0.785236, 0.788145, 0.791030, 0.793892, 0.796731, 0.799546, 0.802337, 0.805105, 0.807850, 0.810570, 0.813267, 0.815940, 0.818589, 0.821214, 0.823814, 0.826391, 0.828944, 0.831472, 0.833977, 0.836457, 0.838913, 0.841345, 0.843752, 0.846136, 0.848495, 0.850830, 0.853141, 0.855428, 0.857690, 0.859929, 0.862143, 0.864334, 0.866500, 0.868643, 0.870762, 0.872857, 0.874928, 0.876976, 0.879000, 0.881000, 0.882977, 0.884930, 0.886861, 0.888768, 0.890651, 0.892512, 0.894350, 0.896165, 0.897958, 0.899727, 0.901475, 0.903200, 0.904902, 0.906582, 0.908241, 0.909877, 0.911492, 0.913085, 0.914657, 0.916207, 0.917736, 0.919243, 0.920730, 0.922196, 0.923641, 0.925066, 0.926471, 0.927855, 0.929219, 0.930563, 0.931888, 0.933193, 0.934478, 0.935745, 0.936992, 0.938220, 0.939429, 0.940620, 0.941792, 0.942947, 0.944083, 0.945201, 0.946301, 0.947384, 0.948449, 0.949497, 0.950529, 0.951543, 0.952540, 0.953521, 0.954486, 0.955435, 0.956367, 0.957284, 0.958185, 0.959070, 0.959941, 0.960796, 0.961636, 0.962462, 0.963273, 0.964070, 0.964852, 0.965620, 0.966375, 0.967116, 0.967843, 0.968557, 0.969258, 0.969946, 0.970621, 0.971283, 0.971933, 0.972571, 0.973197, 0.973810, 0.974412, 0.975002, 0.975581, 0.976148, 0.976705, 0.977250, 0.977784, 0.978308, 0.978822, 0.979325, 0.979818, 0.980301, 0.980774, 0.981237, 0.981691, 0.982136, 0.982571, 0.982997, 0.983414, 0.983823, 0.984222, 0.984614, 0.984997, 0.985371, 0.985738, 0.986097, 0.986447, 0.986791, 0.987126, 0.987455, 0.987776, 0.988089, 0.988396, 0.988696, 0.988989, 0.989276, 0.989556, 0.989830, 0.990097, 0.990358, 0.990613, 0.990863, 0.991106, 0.991344, 0.991576, 0.991802, 0.992024, 0.992240, 0.992451, 0.992656, 0.992857, 0.993053, 0.993244, 0.993431, 0.993613, 0.993790, 0.994132, 0.994457, 0.994766, 0.995060, 0.995339, 0.995604, 0.995855, 0.996093, 0.996319, 0.996533, 0.996736, 0.996928, 0.997110, 0.997282, 0.997445, 0.997599, 0.997744, 0.997882, 0.998012, 0.998134, 0.998250, 0.998359, 0.998462, 0.998559, 0.998650, 0.998856, 0.999032, 0.999184, 0.999313, 0.999423, 0.999517, 0.999596, 0.999663, 0.999720, 0.999767, 0.999807, 0.999841, 0.999869, 0.999892, 0.999912, 0.999928, 0.999941, 0.999952, 0.999961, 0.999968, }; 
	private static final double[][] xtable = {
		{ 0.000000, 0.010000, 0.020000, 0.030000, 0.040000, 0.050000, 0.060000, 0.070000, 0.080000, 0.090000, 0.100000, 0.110000, 0.120000, 0.130000, 0.140000, 0.150000, 0.160000, 0.170000, 0.180000, 0.190000, 0.200000, 0.210000, 0.220000, 0.230000, 0.240000, 0.250000, 0.260000, 0.270000, 0.280000, 0.290000, 0.300000, 0.310000, 0.320000, 0.330000, 0.340000, 0.350000, 0.360000, 0.370000, 0.380000, 0.390000, 0.400000, 0.410000, 0.420000, 0.430000, 0.440000, 0.450000, 0.460000, 0.470000, 0.480000, 0.490000, 0.500000, 0.510000, 0.520000, 0.530000, 0.540000, 0.550000, 0.560000, 0.570000, 0.580000, 0.590000, 0.600000, 0.610000, 0.620000, 0.630000, 0.640000, 0.650000, 0.660000, 0.670000, 0.680000, 0.690000, 0.700000, 0.710000, 0.720000, 0.730000, 0.740000, 0.750000, 0.760000, 0.770000, 0.780000, 0.790000, 0.800000, 0.810000, 0.820000, 0.830000, 0.840000, 0.850000, 0.860000, 0.870000, 0.880000, 0.890000, 0.900000, 0.910000, 0.920000, 0.930000, 0.940000, 0.950000, 0.960000, 0.970000, 0.980000, 0.990000, 1.000000, 1.010000, 1.020000, 1.030000, 1.040000, 1.050000, 1.060000, 1.070000, 1.080000, 1.090000, 1.100000, 1.110000, 1.120000, 1.130000, 1.140000, 1.150000, 1.160000, 1.170000, 1.180000, 1.190000, 1.200000, 1.210000, 1.220000, 1.230000, 1.240000, 1.250000, 1.260000, 1.270000, 1.280000, 1.290000, 1.300000, 1.310000, 1.320000, 1.330000, 1.340000, 1.350000, 1.360000, 1.370000, 1.380000, 1.390000, 1.400000, 1.410000, 1.420000, 1.430000, 1.440000, 1.450000, 1.460000, 1.470000, 1.480000, 1.490000, 1.500000, 1.510000, 1.520000, 1.530000, 1.540000, 1.550000, 1.560000, 1.570000, 1.580000, 1.590000, 1.600000, 1.610000, 1.620000, 1.630000, 1.640000, 1.650000, 1.660000, 1.670000, 1.680000, 1.690000, 1.700000, 1.710000, 1.720000, 1.730000, 1.740000, 1.750000, 1.760000, 1.770000, 1.780000, 1.790000, 1.800000, 1.810000, 1.820000, 1.830000, 1.840000, 1.850000, 1.860000, 1.870000, 1.880000, 1.890000, 1.900000, 1.910000, 1.920000, 1.930000, 1.940000, 1.950000, 1.960000, 1.970000, 1.980000, 1.990000, 2.000000, 2.010000, 2.020000, 2.030000, 2.040000, 2.050000, 2.060000, 2.070000, 2.080000, 2.090000, 2.100000, 2.110000, 2.120000, 2.130000, 2.140000, 2.150000, 2.160000, 2.170000, 2.180000, 2.190000, 2.200000, 2.210000, 2.220000, 2.230000, 2.240000, 2.250000, 2.260000, 2.270000, 2.280000, 2.290000, 2.300000, 2.310000, 2.320000, 2.330000, 2.340000, 2.350000, 2.360000, 2.370000, 2.380000, 2.390000, 2.400000, 2.410000, 2.420000, 2.430000, 2.440000, 2.450000, 2.460000, 2.470000, 2.480000, 2.490000, 2.500000, 2.520000, 2.540000, 2.560000, 2.580000, 2.600000, 2.620000, 2.640000, 2.660000, 2.680000, 2.700000, 2.720000, 2.740000, 2.760000, 2.780000, 2.800000, 2.820000, 2.840000, 2.860000, 2.880000, 2.900000, 2.920000, 2.940000, 2.960000, 2.980000, 3.000000, 3.050000, 3.100000, 3.150000, 3.200000, 3.250000, 3.300000, 3.350000, 3.400000, 3.450000, 3.500000, 3.550000, 3.600000, 3.650000, 3.700000, 3.750000, 3.800000, 3.850000, 3.900000, 3.950000, 4.000000, },
	}; 
	
	/**
	 * Evaluate the cumulative distribution function of the {@link Normal}
	 * distribution. 
	 * @param n sample size such that there are {@code n-1} degrees of freedom. (ignored)
	 * @param x value of random variable {@code X}
	 * @return {@code p = Pr( X <= x | n-1 )}
	 */
	public static double cdf( int n, double x ) {
		double r = 0D;
		boolean negative = x < 0;
		x = negative ? -x : x;
		double[] xrow = xtable[ 0 ];
		int i=0;
		for( double xx: xrow ) {
			if ( x >= xx ) {
				r = xp[ i ];
				i++;
			} else {
				break;
			}
		}
		r = negative ? ( 1 - r ) : r;
		return r;
	}
	/**
	 * Evaluate the inverse of the cumulative distribution function of the
	 * {@link Normal} distribution.
	 * @param n sample size such that there are {@code n-1} degrees of freedom.{@code 2 <= n}
	 * @param p level of confidence. {@code 0 <= p <= 1}
	 * @return {@code x} &ni; {@code Pr( X <= x | n-1 ) = {@code p}
	 */
	public static double inv( int n, double p ) {
		if ( p < 0 || p > 1 ) {
			throw new IllegalArgumentException();
		}
		
		double r = 0;
		boolean negative = p < 0.50;
		double pvalue = negative ? (1 - p) : p;
		double[] xrow = xtable[ 0 ];
		int i;
		for( i=0; i<xp.length; i++ ) {
			double expeeeye = xp[ i ];
			if ( expeeeye > pvalue ) {
				break;
			}
		}
		i--;
		r = negative ? -xrow[ i ] : xrow[ i ];
		return r;
	}
}
